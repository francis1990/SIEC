<?php

namespace ParteDiarioBundle\Repository;

use Doctrine\ORM\EntityRepository;
use EnumsBundle\Entity\EnumMeses;

/**
 * DatParteDiarioConsAsegRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DatParteDiarioConsAsegRepository extends EntityRepository
{
    public function calcularConsumo($params)
    {
        $em = $this->getEntityManager();
        if (is_array($params['idproducto'])) {
            $idproducto = implode(",", $params['idproducto']);
        } else {
            $idproducto = $params['idproducto'];
        }

        $idaseg = implode(",", $params['idaseguramiento']);
        $where = '1=1 ';
        // $where .= ($um != null) ? (' and g.um =' . $um) : '';
        $where .= ($params['fechaCierre'] != '' && $params['fechaCierre'] != null) ? ' and g.fecha <=' . "'" . $params['fechaCierre'] . "'" . '' : '';
        $where .= ($params['idueb'] != '' && $params['idueb'] != null) ? (' and g.ueb in (' . $params['idueb'] . ')') : '';
        $where .= ($params['moneda'] != '' && $params['moneda'] != null) ? (' and normaaseg.moneda = ' . $params['moneda']) : '';
        $where .= ($idproducto != '' && $idproducto != null && $idproducto != ' ') ? (' and g.producto in(' . $idproducto . ')') : '';
        $where .= $idaseg != '' && $idaseg != null ? (' and normaaseg.aseguramiento in(' . $idaseg . ')') : '';
        $explodeFecha = EnumMeses::convertfecha($params['fecha']);
        if ($params['acumulado'] == 1) {//acumulado en el mes
            $where .= ($params['fecha'] != '' && $params['fecha'] != null) ?
                (' and g.fecha >=' . "'" . $explodeFecha['a'] . '-' . $explodeFecha['m'] . '-01' . "'") : '';
        }
        $primerDiaAno = EnumMeses::primerDiaAno($params['fecha']);
        if ($params['acumulado'] == 2) {//acumulado en el aÃ±o
            $where .= ($params['fecha'] != '' && $params['fecha'] != null) ?
                (' and g.fecha >=' . "'" . $primerDiaAno . "'") : '';
        }
        if ($params['acumulado'] == 3) {// mes completo
            $enum = new EnumMeses();
            $range = $enum->intervaloMes($params['fecha']);
            $where .= ' and g.fecha <=' . "'" . $range['fin'] . "'" . ' and g.fecha >=' . "'" . $range['inicio'] . "'" . '';
        }
        $dql = "SELECT g,cons,normaaseg,sum(cons.cantasegreal)  as cantidad, sum(g.nivelact) as nivelact
            FROM ParteDiarioBundle:DatConsumoAseguramiento cons
            JOIN cons.parte g
            JOIN cons.aseguramiento normaaseg 
            WHERE " . $where;
        $consulta_partes = $em->createQuery($dql);
        $result = $consulta_partes->getResult();
        return $result;
    }

    public function verificarExistParteConsmatPrim($params)
    {
        $em = $this->getEntityManager();
        $dql = "SELECT g
                FROM ParteDiarioBundle:DatConsumoAseguramiento g
                JOIN g.aseguramiento aseg
                JOIN aseg.aseguramiento nom_aseg
                JOIN g.parte part
                WHERE part.producto = :producto AND part.fecha = :fecha AND part.ueb = :ueb";
        $consulta = $em->createQuery($dql);
        $consulta->setParameter('producto', $params['producto']);
        $consulta->setParameter('ueb', $params['ueb']);
        $consulta->setParameter('fecha', $params['fecha']);
        $result = $consulta->getResult();
        return $result;
    }
}
