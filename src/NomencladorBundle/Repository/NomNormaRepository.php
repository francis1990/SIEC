<?php

namespace NomencladorBundle\Repository;

use Doctrine\Common\Util\Debug;
use Doctrine\ORM\EntityRepository;
use NomencladorBundle\Entity\NomNorma;
use NomencladorBundle\Util\Util;

/**
 * NomNormaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NomNormaRepository extends EntityRepository
{
    /**
     * @param int $prod
     * @return NomNorma
     */
    public function findNormaByProducto($prod)
    {
        $dql = 'SELECT norm
            FROM NomencladorBundle:NomNorma norm
            JOIN norm.producto pro
            WHERE pro.idproducto = ' . $prod . ' ';
        $consulta = $this->getEntityManager()->createQuery($dql);
        $result = $consulta->getResult();
        return $result;

    }

    public function listarDelExportarNormas($producto)
    {
        $em = $this->getEntityManager();
        $datas = Util::whereFiltrarNorma($em, 'NomencladorBundle:NomNorma', $producto);
        $data = array();
        foreach ($datas as $n) {
            if (count($n->getAseguramientos()) > 1) {
                foreach ($n->getAseguramientos() as $value) {
                    $data[] = array(
                        'aseguramiento' => $value->getAseguramiento()->getNombre(),
                        'moneda' => $value->getMoneda()->getNombre(),
                        'um' => $value->getUmaseg()->getAbreviatura(),
                        'valor' => $value->getCantaseg(),
                        'idproducto' => $n->getProducto()->getIdproducto(),
                        'codigoPro' => $n->getProducto()->getCodigo(),
                        'nombrePro' => $n->getProducto()->getNombre(),
                        'valornorma' => $n->getValornorma(),
                        'umnorma' => $n->getUmnorma(),
                        'tiponorma' => $n->getTiponorma()
                    );
                }
            } else {
                $data[] = array(
                    'aseguramiento' => $n->getAseguramientos()[0]->getAseguramiento()->getNombre(),
                    'moneda' => $n->getAseguramientos()[0]->getMoneda()->getNombre(),
                    'um' => $n->getAseguramientos()[0]->getUmaseg()->getAbreviatura(),
                    'valor' => $n->getAseguramientos()[0]->getCantaseg(),
                    'idproducto' => $n->getProducto()->getIdproducto(),
                    'codigoPro' => $n->getProducto()->getCodigo(),
                    'nombrePro' => $n->getProducto()->getNombre(),
                    'valornorma' => $n->getValornorma(),
                    'umnorma' => $n->getUmnorma(),
                    'tiponorma' => $n->getTiponorma()->getNombre()
                );
            }

        }

        return $data;
    }

    public function obtenerCanAsegByProdAseg($prod, $aseg)
    {
        $pro = is_array($prod) ? implode(",", $prod) : $prod;

        $asegImp = implode(",", $aseg);
        $dql = 'SELECT normaseg.cantaseg, norm as norma
            FROM NomencladorBundle:NomNorma norm
            JOIN norm.aseguramientos normaseg
            JOIN normaseg.aseguramiento aseg
            JOIN norm.producto pro 
            WHERE pro.idproducto in (' . $pro . ') AND aseg.idaseguramiento IN ( ' . $asegImp . ")";
        $consulta = $this->getEntityManager()->createQuery($dql);
        $result = $consulta->getResult();
        return $result;
    }

    public function getAseguramientosByTipoNC($tipoNC, $producto)
    {
        $where = "";
        if ($producto != "") {
            $where .= " AND norm.producto = " . $producto;
        }
        $dql = 'SELECT norm
            FROM NomencladorBundle:NomNorma norm
            JOIN norm.aseguramientos aseg
            WHERE norm.tiponorma = ' . $tipoNC . ' ' . $where;
        $consulta = $this->getEntityManager()->createQuery($dql);

        $consulta->setMaxResults(1);
        $result = $consulta->getOneOrNullResult();
        return $result;
    }

}
